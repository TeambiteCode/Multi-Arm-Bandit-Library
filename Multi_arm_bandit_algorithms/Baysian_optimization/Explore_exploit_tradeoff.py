import tensorflow as tf
from Machine_learning.Gaussian_process import Gaussian_process
import numpy as np


def Explore_exploit_tradeoff(X, Y, upper_bound, lower_bound, tradeoff_factor, datatype = tf.float64, noise = None, return_aqs = False):
    G = Gaussian_process(datatype=datatype)
    if noise == None:
        G.fit_noiseless(X, Y)
    else:
        G.fit_noisy(X, Y, noise)


    #for the time being consider 1D case
    samples = np.linspace(lower_bound, upper_bound, 30)
    values = [0]*len(samples)

    for i in range(len(samples)):
        g_ = G.predict(samples[i])
        values[i] = g_[0] + tradeoff_factor*g_[1]
    print(values)
    max = -float("inf")
    max_value_holder = None
    for i in range(len(samples)):
        if values[i] > max:
            max = values[i]
            max_value_holder = i
    if return_aqs == False:
        return samples[max_value_holder]
    else:
        return samples[max_value_holder], values, max_value_holder
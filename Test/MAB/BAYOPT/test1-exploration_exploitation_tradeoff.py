import matplotlib.pyplot as plt
import numpy as np
from Multi_arm_bandit_algorithms.Baysian_optimization.Explore_exploit_tradeoff import Explore_exploit_tradeoff

def f(x):

    return -x**2

x = np.linspace(-100, 100, 200)
y = [f(i) for i in x]

figure = plt.figure("a")
plt.plot(x, y)
plt.savefig("Actual function")

x = [-3, -2, 4]
y = [f(i) for i in x]




for i in range(20):
    print(i)
    x_, values, max_index = Explore_exploit_tradeoff(x, y, upper_bound=10, lower_bound=-10, tradeoff_factor=1, noise=0.1, return_aqs=True)
    a = np.linspace(-10, 10, 30)
    value = [i[0] for i in values]
    fig = plt.figure(str(i))
    plt.plot(a,value)
    plt.plot(a[max_index], value[max_index], 'g*')
    plt.savefig(str("Aqusition function after " + str(i+1)+ " th iteration"))

    fig1 = plt.figure(str(i) + "a")
    plt.plot(x, y, 'ro')
    plt.savefig('Sampled points before the '+ str(i+1) +" th iterartion")

    x.append(x_)
    x.sort()
    y = [f(i) for i in x]

    print(x)
    print(y)
    print('********')